classDiagram
    title Diagrama de Classes Corrigido - MicroPandemic

    %% Enumeração de Cores
    class Cor {
        <<enumeration>>
        VERMELHA
        AZUL
        AMARELA
        VERDE
    }

    %% Enumeração de Tipos de Carta
    class TipoCarta {
        <<enumeration>>
        CIDADE
        EVENTO
        EPIDEMIA
        ACAO
    }

    %% Classe Jogo (Singleton) - Orquestrador Central
    class Jogo {
        <<singleton>>
        -instancia : Jogo
        -jogadores : List~Jogador~
        -cidades : Map~String, Cidade~
        -baralho : Baralho
        -doencas : Map~Cor, Doenca~
        -acoesRestantes : int
        -gameOver : boolean
        +getInstance() : Jogo
        +inicializarJogo(numJogadores: int) : void
        +proximoTurno() : void
        +realizarAcao(jogador: Jogador, carta: Carta) : boolean
        +verificarVitoria() : boolean
        +verificarDerrota() : boolean
        +getJogadorAtual() : Jogador
        +descobrirCura(cor : Cor) : void
        +aplicarEventoDoenca() : void
    }

    %% Classe Baralho - Ajustada para melhor balanceamento
    class Baralho {
        -cartas : List~Carta~
        -descarte : List~Carta~
        +Baralho(num_jogadores: int)
        +inicializar_baralho(num_jogadores: int) : void
        +comprar_carta() : Carta
        +embaralhar() : void
        +esta_vazio() : boolean
    }

    %% Classe Cidade - Com sistema de níveis de doença corrigido
    class Cidade {
        -nome : String
        -vizinhas : List~Cidade~
        -tem_centro_pesquisa : boolean
        -niveis_doenca : Map~Cor, Integer~
        +Cidade(nome : String)
        +adicionar_vizinha(cidade : Cidade) : void
        +construir_centro_pesquisa() : void
        +adicionar_nivel_doenca(cor : Cor, quantidade: int) : void
        +propagar_doenca(cor : Cor) : void
        +reduzir_nivel_doenca(cor : Cor, quantidade: int) : void
        +remover_toda_doenca_de_cor(cor : Cor) : void
        +get_nivel_doenca(cor: Cor) : int
    }

    class Jogador {
        -nome: String
        -posicao : Cidade
        -mao : Mao
        -baralho_pessoal : Baralho
        +Jogador(nome: String, posicao: Cidade, num_jogadores: int)
        +mover_para(cidade : Cidade) : void
        +mao() : Mao
        +compartilhar_carta(outroJogador : Jogador, carta : Carta) : boolean
    }

    class Mao {
        -cartas : List~Carta~
        -limite_cartas : int
        +Mao()
        +adicionar_carta(carta : Carta) : boolean
        +remover_carta(carta : Carta) : boolean
        +cartas() : List~Carta~
        +esta_cheia() : boolean
    }

    class Doenca {
        -cor : Cor
        -curada : boolean
        +Doenca(cor : Cor)
        +curada() : boolean
        +curada(status : boolean) : void
    }

    %% Hierarquia de Cartas (Polimorfismo)
    class Carta {
        <<abstract>>
        #nome : String
        #tipo : TipoCarta
        +ativar(jogo : Jogo, jogador : Jogador, **kwargs)* : boolean
    }

    class DescobrirCura {
        -cor : Cor
        +ativar(jogo : Jogo, jogador : Jogador, **kwargs) : boolean
    }
    class BloquearInfeccao {
        +ativar(jogo : Jogo, jogador : Jogador, **kwargs) : boolean
    }
    class TratarDoenca {
        -cor : Cor
        +ativar(jogo : Jogo, jogador : Jogador, **kwargs) : boolean
    }
    class Teletransporte {
        +ativar(jogo : Jogo, jogador : Jogador, cidade_alvo: Cidade) : boolean
    }
    class ConstruirCentroPesquisa {
        +ativar(jogo : Jogo, jogador : Jogador, **kwargs) : boolean
    }
    class EventoDoenca {
        -cor : Cor
        +ativar(jogo : Jogo, jogador : Jogador, **kwargs) : boolean
    }

    %% Relações de Herança
    Carta <|-- DescobrirCura
    Carta <|-- BloquearInfeccao
    Carta <|-- TratarDoenca
    Carta <|-- EventoDoenca
    Carta <|-- Teletransporte
    Carta <|-- ConstruirCentroPesquisa

    %% Relações de Composição e Agregação
    Jogo "1" *-- "1" Baralho
    Jogo "1" *-- "1..4" Jogador
    Jogo "1" *-- "*" Cidade
    Jogo "1" *-- "4" Doenca
    Jogador "1" *-- "1" Mao
    Mao "1" o-- "0..7" Carta
    Baralho "1" *-- "*" Carta

    %% Relações de Associação
    Cidade "1" --> "*" Cidade : vizinha
    Jogador "1" --> "1" Cidade : posicao

    %% Dependências
    Carta ..> Jogo : usa
    Carta ..> Jogador : usa
    Teletransporte ..> Cidade : usa
