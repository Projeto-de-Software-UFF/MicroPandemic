classDiagram
    title Diagrama de Classes Corrigido - MicroPandemic

    %% Enumerações
    class Cor {
        <<enumeration>>
        AZUL
        VERMELHO
        AMARELO
        VERDE
    }

    class TipoCarta {
        <<enumeration>>
        CIDADE
        EVENTO
        EPIDEMIA
        ACAO
    }

    %% Classe de Controle
    class GameMap {
        -_map: List~Cidade~
        -_num_cidades: int
        -_max_vizinhos_por_cidade: int
        +GameMap(num_cidades: int, max_vizinhos_por_cidade: int)
        -_criar_mapa() : void
        +getMap() : List~Cidade~
    }

    %% Classe Jogo (Singleton)
    class Jogo {
        <<singleton>>
        -_instancia : Jogo
        -acoes_restantes : int
        -game_over : bool
        -vitoria : bool
        -jogador_atual_idx : int
        -_infeccao_bloqueada : bool
        -_turn_count : int
        -_share_card_actions_this_turn : Dict~Jogador, int~
        +get_instancia() : Jogo
        +jogador_atual() : Jogador
        +inicializar_jogo(num_jogadores: int) : void
        +mover_jogador(jogador: Jogador, cidade_destino: Cidade) : bool
        +compartilhar_carta_acao(jogador_origem: Jogador, jogador_destino: Jogador, carta_a_compartilhar: Carta) : bool
        +proximo_turno() : void
        +executar_fases_fim_turno() : void
        +fase_infeccao() : void
        +descobrir_cura(cor: Cor) : void
        +aplicar_evento_doenca(cor: Cor) : void
        +bloquear_proxima_infeccao() : void
        +get_doenca(cor: Cor) : Doenca
        +verificar_condicoes_finais() : void
    }

    %% Classe Baralho
    class Baralho {
        -_descarte : List~Carta~
        +Baralho(num_jogadores: int)
        -_inicializar_baralho(num_jogadores: int) : void
        +comprar_carta() : Carta
        +embaralhar() : void
        +esta_vazio() : bool
    }

    %% Classe Cidade
    class Cidade {
        -_nome : str
        -_tem_centro_pesquisa : bool
        -_niveis_doenca : Dict~Cor, int~
        +Cidade(nome: str)
        +nome() : str
        +vizinhas() : List~Cidade~
        +tem_centro_pesquisa() : bool
        +niveis_doenca() : Dict~Cor, int~
        +adicionar_vizinha(cidade: Cidade) : void
        +construir_centro_pesquisa() : void
        +adicionar_nivel_doenca(cor: Cor, quantidade: int, outbreak_cities: set) : void
        +propagar_doenca(cor: Cor, outbreak_cities: set) : void
        +reduzir_nivel_doenca(cor: Cor, quantidade: int) : void
        +remover_toda_doenca_de_cor(cor: Cor) : void
        +get_nivel_doenca(cor: Cor) : int
    }

    %% Classe Jogador
    class Jogador {
        -_nome : str
        +Jogador(nome: str, posicao: Cidade, num_jogadores: int)
        +nome() : str
        +posicao() : Cidade
        +mao() : Mao
        +mover_para(cidade: Cidade) : void
        +compartilhar_carta(outro_jogador: Jogador, carta: Carta) : bool
    }

    %% Classe Mao
    class Mao {
        -_limite_cartas : int
        +Mao()
        +cartas() : List~Carta~
        +adicionar_carta(carta: Carta) : bool
        +remover_carta(carta: Carta) : bool
        +esta_cheia() : bool
    }

    %% Classe Doenca
    class Doenca {
        -_cor : Cor
        -_curada : bool
        +Doenca(cor: Cor)
        +cor() : Cor
        +curada() : bool
        +curada(status: bool) : void
    }

    %% Hierarquia de Cartas
    class Carta {
        <<abstract>>
        -_nome : str
        -_tipo : TipoCarta
        +nome() : str
        +tipo() : TipoCarta
        +ativar(jogo: Jogo, jogador: Jogador, **kwargs)* : bool
    }

    class DescobrirCura {
        -_cor : Cor
        +cor() : Cor
        +ativar(jogo: Jogo, jogador: Jogador, **kwargs) : bool
    }
    class BloquearInfeccao {
        +ativar(jogo: Jogo, jogador: Jogador, **kwargs) : bool
    }
    class TratarDoenca {
        -_cor : Cor
        +cor() : Cor
        +ativar(jogo: Jogo, jogador: Jogador, **kwargs) : bool
    }
    class Teletransporte {
        +ativar(jogo: Jogo, jogador: Jogador, cidade_alvo: Cidade) : bool
    }
    class ConstruirCentroPesquisa {
        +ativar(jogo: Jogo, jogador: Jogador, **kwargs) : bool
    }
    class EventoDoenca {
        -_cor : Cor
        +cor() : Cor
        +ativar(jogo: Jogo, jogador: Jogador, **kwargs) : bool
    }

    %% Relações de Herança
    Carta <|-- DescobrirCura
    Carta <|-- BloquearInfeccao
    Carta <|-- TratarDoenca
    Carta <|-- EventoDoenca
    Carta <|-- Teletransporte
    Carta <|-- ConstruirCentroPesquisa

    %% Relações
    Jogo "1" -- "0..1" Baralho : (baralho compartilhado)
    Jogo "1" <-- "1..4" Jogador
    Jogo "1" <-- "4" Doenca
    GameMap "1" <-- "*" Cidade
    Jogador "1" <-- "1" Mao
    Jogador "1" -- "0..1" Baralho : (baralho pessoal)
    Mao "1" o-- "0..*" Carta
    Baralho "1" *-- "*" Carta
    Cidade "1" --> "*" Cidade : vizinha
    Jogador "1" --> "1" Cidade : posicao

    %% Dependências
    Jogo ..> GameMap : usa
    Carta ..> Jogo : usa
    Carta ..> Jogador : usa
    Teletransporte ..> Cidade : usa